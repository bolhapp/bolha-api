name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    # needs: build # Ensures `test` runs after `build`

    env: 
      DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/lfg:latest

    permissions: 
      packages: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Build and Push Docker Image to GitHub Container Registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}

      
      # Step 5: Set up SSH
      # - name: Install SSH Key
      #   uses: webfactory/ssh-agent@0.9.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_KEY }}

      # Step 6: Deploy Docker image to EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
        run: |
          echo $SSH_KEY > id_rsa
          chmod 600 id_rsa

          ls .

          ssh -i id_rsa -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Pull the latest Docker image
            docker pull $DOCKER_IMAGE
            
            # Stop and remove any existing container
            docker rm -f lfg || true
            
            # Run the new container
            docker run -d --name lfg -p 80:3000 $DOCKER_IMAGE
          EOF