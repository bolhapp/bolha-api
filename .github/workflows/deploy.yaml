name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env: 
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/lfg:latest

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Checkout the code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Step 2: Set up Node.js environment
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22' # Specify your Node.js version

  #     # Step 3: Set up Yarn v4 (Berry)
  #     - name: Set up Yarn v4
  #       run: |
  #         corepack enable
  #         yarn set version latest

  #     # Step 4: Cache `node_modules`
  #     - name: Cache node_modules
  #       uses: actions/cache@v3
  #       with:
  #         # path: |
  #         #   .yarn/cache
  #         #   node_modules
  #         #   dist
  #         path: dist
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-

  #     # Step 5: Install dependencies using Yarn
  #     - name: Install dependencies
  #       run: yarn install

  #     # Step 6: Run build (or any other command)
  #     - name: Build the project
  #       run: yarn build

  deploy:
    runs-on: ubuntu-latest
    # needs: build # Ensures `test` runs after `build`

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Restore the cache from the build job
      - name: Restore dist cache
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      # Step 3: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Build and Push Docker Image to GitHub Container Registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: $DOCKER_IMAGE
      
      # Step 5: Set up SSH
      - name: Install SSH Key
        uses: webfactory/ssh-agent@0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # Step 6: Deploy Docker image to EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Pull the latest Docker image
            docker pull $DOCKER_IMAGE
            
            # Stop and remove any existing container
            docker rm -f lfg || true
            
            # Run the new container
            docker run -d --name lfg -p 80:3000 $DOCKER_IMAGE
          EOF