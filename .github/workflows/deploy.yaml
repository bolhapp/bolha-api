name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: deploy
    env: 
      DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/lfg:latest

    permissions: 
      contents: read
      packages: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Build and Push Docker Image to GitHub Container Registry
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.DOCKER_IMAGE }}


      # Step 6: Deploy Docker image to EC2
      - name: Add SSH key
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p /home/runner/.ssh
          # Replace example.com with the hostname of the machine
          # you're SSH-ing into
          ssh-keyscan example.com >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null	
          ssh-add /home/runner/.ssh/github_actions

      - name: Deploy to EC2
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          # SSH_KEY: ${{ env.SSH_KEY }}
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
        run: |
          echo $SSH_KEY > id_rsa.pem
          chmod 600 id_rsa.pem

          cat id_rsa.pem

          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Pull the latest Docker image
            docker pull $DOCKER_IMAGE
            
            # Stop and remove any existing container
            docker rm -f lfg || true
            
            # Run the new container
            docker run -d --name lfg -p 80:3000 $DOCKER_IMAGE
          EOF

      # - name: Deploy to my EC2 instance
      #   uses: appleboy/ssh-action@master
      #   env: 
      #     DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       echo $DOCKER_IMAGE
          
      #       # Pull the latest Docker image
      #       docker pull $DOCKER_IMAGE
            
      #       # Stop and remove any existing container
      #       docker rm -f lfg || true
            
      #       # Run the new container
      #       docker run -d --name lfg -p 80:3000 $DOCKER_IMAGE