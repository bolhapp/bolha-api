name: Deployment

on:
  push:
    branches:
      - master
    paths:
      - "src/**"
      - "dockerfile"
      - "package.json"
      - "yarn.lock"
      - ".github/workflows/deployment.yaml"
  pull_request:
    branches:
      - master
    paths:
        - "src/**"
        - "dockerfile"
        - "package.json"
        - "yarn.lock"
        - ".github/workflows/deployment.yaml"

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: deploy
    env: 
      DOCKER_IMAGE: ghcr.io/lfgappeu/lfg-api:latest

    permissions: 
      contents: read
      packages: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Build and Push Docker Image to GitHub Container Registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # todo: we should also build an image with the actual version for if we need to go back
          tags: ${{ env.DOCKER_IMAGE }}


      # add step 5 to deploy sourcemaps to sentry (run image yarn sentry:sourcemaps)

      # Step 6: Deploy to ec2
      - name: Deploy to my EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # login to github registry
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            # Pull the latest Docker image
            docker pull ${{ env.DOCKER_IMAGE }}

            # Update env file
            cd app
            rm env
            echo "PORT='${{ secrets.DOCKER_PORT }}'" >> env
            echo "NODE_ENV='${{ secrets.DOCKER_NODE_ENV }}'" >> env
            echo "APP_BASE_URL='${{ secrets.DOCKER_APP_BASE_URL }}'" >> env
            echo "POSTGRES_URL='${{ secrets.DOCKER_POSTGRES_URL }}'" >> env
            echo "FIREBASE_API_KEY='${{ secrets.DOCKER_FIREBASE_API_KEY }}'" >> env
            echo "JWT_SECRET='${{ secrets.DOCKER_JWT_SECRET }}'" >> env
            echo "BREVO_API_KEY='${{ secrets.DOCKER_BREVO_API_KEY }}'" >> env
            echo "USER_ACTION_REQUIRED_TEMPLATE_ID='${{ secrets.DOCKER_USER_ACTION_REQUIRED_TEMPLATE_ID }}'" >> env
            echo "INFORMATION_TEMPLATE_ID='${{ secrets.DOCKER_INFORMATION_TEMPLATE_ID }}'" >> env

            # run container
            docker-compose up -d

            # make sure container is running
            docker ps --format '{{.Names}}' | grep -q "lfgapi" || { echo "Error: Container is not running."; exit 1; }

    